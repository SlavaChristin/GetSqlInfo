<Queries>
	<!-- Query 3 -->
    <Query name="ServerProperties" level="server">
	<![CDATA[
		SELECT 	
			SERVERPROPERTY('MachineName') AS [MachineName], 
			SERVERPROPERTY('ServerName') AS [ServerName],  
			SERVERPROPERTY('InstanceName') AS [Instance], 
			SERVERPROPERTY('IsClustered') AS [IsClustered], 
			SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS [ComputerNamePhysicalNetBIOS], 
			SERVERPROPERTY('Edition') AS [Edition], 
			SERVERPROPERTY('ProductLevel') AS [ProductLevel],				-- What servicing branch (RTM/SP/CU)
			SERVERPROPERTY('ProductUpdateLevel') AS [ProductUpdateLevel],	-- Within a servicing branch, what CU# is applied
			SERVERPROPERTY('ProductVersion') AS [ProductVersion],
			SERVERPROPERTY('ProductMajorVersion') AS [ProductMajorVersion], 
			SERVERPROPERTY('ProductMinorVersion') AS [ProductMinorVersion], 
			SERVERPROPERTY('ProductBuild') AS [ProductBuild], 
			SERVERPROPERTY('ProductBuildType') AS [ProductBuildType],		-- Is this a GDR or OD hotfix (NULL if on a CU build)
			SERVERPROPERTY('ProductUpdateReference') AS [ProductUpdateReference], -- KB article number that is applicable for this build
			SERVERPROPERTY('ProcessID') AS [ProcessID],
			SERVERPROPERTY('Collation') AS [Collation], 
			SERVERPROPERTY('IsFullTextInstalled') AS [IsFullTextInstalled], 
			SERVERPROPERTY('IsIntegratedSecurityOnly') AS [IsIntegratedSecurityOnly],
			SERVERPROPERTY('FilestreamConfiguredLevel') AS [FilestreamConfiguredLevel],
			SERVERPROPERTY('IsHadrEnabled') AS [IsHadrEnabled], 
			SERVERPROPERTY('HadrManagerStatus') AS [HadrManagerStatus],
			SERVERPROPERTY('InstanceDefaultDataPath') AS [InstanceDefaultDataPath],
			SERVERPROPERTY('InstanceDefaultLogPath') AS [InstanceDefaultLogPath],
			SERVERPROPERTY('BuildClrVersion') AS [Build CLR Version];
	]]>
    </Query>
	
	<!-- Query 4 -->
	<Query name="ConfigurationValues" level="server">
	<![CDATA[
		SELECT 
			name, 
			value, 
			value_in_use, 
			minimum, 
			maximum, 
			[description], 
			is_dynamic, 
			is_advanced 
		FROM 
			sys.configurations WITH (NOLOCK)
		ORDER BY name 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 5 -->
	<Query name="GlobalTraceFlags" level="server">
	<![CDATA[
		DBCC TRACESTATUS (-1);
	]]>
    </Query>
	
	
	<!-- Query 6 -->
	<Query name="ProcessMemory" level="server">
	<![CDATA[
		SELECT 
			physical_memory_in_use_kb/1024 AS [SQL Server Memory Usage (MB)],
			large_page_allocations_kb, 
			locked_page_allocations_kb, 
			page_fault_count, 
			memory_utilization_percentage, 
			available_commit_limit_kb, 
			process_physical_memory_low, 
			process_virtual_memory_low
		FROM 
			sys.dm_os_process_memory WITH (NOLOCK) 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 7 -->
	<Query name="ServicesInfo" level="server">
	<![CDATA[
		SELECT 
			servicename, 
			process_id, 
			startup_type_desc, 
			status_desc, 
			last_startup_time, 
			service_account, 
			is_clustered, 
			cluster_nodename, 
			[filename]
		FROM 
			sys.dm_server_services WITH (NOLOCK) 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 10 -->
	<Query name="WindowsInfo" level="server">
	<![CDATA[
		SELECT 
			windows_release, 
			windows_service_pack_level, 
			windows_sku, 
			os_language_version
		FROM 
			sys.dm_os_windows_info WITH (NOLOCK) 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 11 -->
	<Query name="NUMAInfo" level="server">
	<![CDATA[
		SELECT 
			node_id, 
			node_state_desc, 
			memory_node_id, 
			processor_group, 
			online_scheduler_count, 
			active_worker_count, 
			avg_load_balance, 
			resource_monitor_state
		FROM 
			sys.dm_os_nodes WITH (NOLOCK) 
		WHERE 
			node_state_desc <> N'ONLINE DAC' 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 12 -->
	<Query name="SystemMemory" level="server">
	<![CDATA[
		SELECT 
			total_physical_memory_kb/1024 AS [Physical Memory (MB)], 
			available_physical_memory_kb/1024 AS [Available Memory (MB)], 
			total_page_file_kb/1024 AS [Total Page File (MB)], 
			available_page_file_kb/1024 AS [Available Page File (MB)], 
			system_cache_kb/1024 AS [System Cache (MB)],
			system_memory_state_desc AS [System Memory State]
		FROM 
			sys.dm_os_sys_memory WITH (NOLOCK) 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 16 -->
	<Query name="HardwareInfo" level="server">
	<![CDATA[
		SELECT 
			cpu_count AS [Logical CPU Count], 
			scheduler_count, 
			hyperthread_ratio AS [Hyperthread Ratio],
			cpu_count/hyperthread_ratio AS [Physical CPU Count], 
			physical_memory_kb/1024 AS [Physical Memory (MB)], 
			committed_kb/1024 AS [Committed Memory (MB)],
			committed_target_kb/1024 AS [Committed Target Memory (MB)],
			max_workers_count AS [Max Workers Count], 
			affinity_type_desc AS [Affinity Type], 
			sqlserver_start_time AS [SQL Server Start Time], 
			virtual_machine_type_desc AS [Virtual Machine Type]  
		FROM 
			sys.dm_os_sys_info WITH (NOLOCK) 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 17 -->
	<Query name="SystemManufacturer" level="server">
	<![CDATA[
		EXEC sys.xp_readerrorlog 0, 1, N'Manufacturer';
	]]>
    </Query>


	<!-- Query 18 -->
	<Query name="ProcessorDescription" level="server">
	<![CDATA[
		EXEC sys.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'HARDWARE\DESCRIPTION\System\CentralProcessor\0', N'ProcessorNameString';
	]]>
    </Query>
	
	<!-- Query 19 -->
	<Query name="MemoryDumpInfo" level="server">
	<![CDATA[
		SELECT 
			[filename], 
			creation_time, 
			size_in_bytes/1048576.0 AS [Size (MB)]
		FROM 
			sys.dm_server_memory_dumps WITH (NOLOCK) 
		ORDER BY 
			creation_time DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 20 -->
	<Query name="DatabasePaths" level="server">
	<![CDATA[
		SELECT 
			DB_NAME([database_id]) AS [Database Name], 
			[file_id], 
			name, 
			physical_name, 
			type_desc, 
			state_desc,
			is_percent_growth, 
			growth,
			CONVERT(bigint, growth/128.0) AS [Growth in MB], 
			CONVERT(bigint, size/128.0) AS [Total Size in MB]
		FROM 
			sys.master_files WITH (NOLOCK)
		ORDER BY DB_NAME([database_id]) 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 21 -->
	<Query name="VolumeInfo" level="server">
	<![CDATA[
		SELECT DISTINCT 
			vs.volume_mount_point, 
			vs.file_system_type, 
			vs.logical_volume_name, 
			CONVERT(DECIMAL(18,2),vs.total_bytes/1073741824.0) AS [Total Size (GB)],
			CONVERT(DECIMAL(18,2), vs.available_bytes/1073741824.0) AS [Available Size (GB)],  
			CONVERT(DECIMAL(18,2), vs.available_bytes * 1. / vs.total_bytes * 100.) AS [Space Free %]
		FROM 
			sys.master_files AS f WITH (NOLOCK)
			CROSS APPLY sys.dm_os_volume_stats(f.database_id, f.[file_id]) AS vs 
		ORDER BY 
			vs.volume_mount_point 
		OPTION (RECOMPILE);
	]]>
    </Query>	
	
	<!-- Query 22 -->
	<Query name="DriveLevelLatency" level="server">
	<![CDATA[
		SELECT 
			tab.[Drive], 
			tab.volume_mount_point AS [Volume Mount Point], 
			CASE 
				WHEN num_of_reads = 0 THEN 0 
				ELSE (io_stall_read_ms/num_of_reads) 
			END AS [Read Latency],
			CASE 
				WHEN io_stall_write_ms = 0 THEN 0 
				ELSE (io_stall_write_ms/num_of_writes) 
			END AS [Write Latency],
			CASE 
				WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0 
				ELSE (io_stall/(num_of_reads + num_of_writes)) 
			END AS [Overall Latency],
			CASE 
				WHEN num_of_reads = 0 THEN 0 
				ELSE (num_of_bytes_read/num_of_reads) 
			END AS [Avg Bytes/Read],
			CASE 
				WHEN io_stall_write_ms = 0 THEN 0 
				ELSE (num_of_bytes_written/num_of_writes) 
			END AS [Avg Bytes/Write],
			CASE 
				WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0 
				ELSE ((num_of_bytes_read + num_of_bytes_written)/(num_of_reads + num_of_writes)) 
			END AS [Avg Bytes/Transfer]
		FROM (SELECT LEFT(UPPER(mf.physical_name), 2) AS Drive, SUM(num_of_reads) AS num_of_reads,
					 SUM(io_stall_read_ms) AS io_stall_read_ms, SUM(num_of_writes) AS num_of_writes,
					 SUM(io_stall_write_ms) AS io_stall_write_ms, SUM(num_of_bytes_read) AS num_of_bytes_read,
					 SUM(num_of_bytes_written) AS num_of_bytes_written, SUM(io_stall) AS io_stall, vs.volume_mount_point 
			  FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS vfs
			  INNER JOIN sys.master_files AS mf WITH (NOLOCK)
			  ON vfs.database_id = mf.database_id AND vfs.file_id = mf.file_id
			  CROSS APPLY sys.dm_os_volume_stats(mf.database_id, mf.[file_id]) AS vs 
			  GROUP BY LEFT(UPPER(mf.physical_name), 2), vs.volume_mount_point) AS tab
		ORDER BY [Overall Latency] 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 23 -->
	<Query name="IO_Stalls_By_File"  level="server">
	<![CDATA[
		SELECT 
			DB_NAME(fs.database_id) AS [Database Name], 
			CAST(fs.io_stall_read_ms/(1.0 + fs.num_of_reads) AS NUMERIC(10,1)) AS [avg_read_stall_ms],
			CAST(fs.io_stall_write_ms/(1.0 + fs.num_of_writes) AS NUMERIC(10,1)) AS [avg_write_stall_ms],
			CAST((fs.io_stall_read_ms + fs.io_stall_write_ms)/(1.0 + fs.num_of_reads + fs.num_of_writes) AS NUMERIC(10,1)) AS [avg_io_stall_ms],
			CONVERT(DECIMAL(18,2), mf.size/128.0) AS [File Size (MB)],
			mf.physical_name, 
			mf.type_desc, 
			fs.io_stall_read_ms, 
			fs.num_of_reads, 
			fs.io_stall_write_ms, 
			fs.num_of_writes, 
			fs.io_stall_read_ms + fs.io_stall_write_ms AS [io_stalls], 
			fs.num_of_reads + fs.num_of_writes AS [total_io]
		FROM sys.dm_io_virtual_file_stats(null,null) AS fs
			INNER JOIN sys.master_files AS mf WITH (NOLOCK)
			ON fs.database_id = mf.database_id AND fs.[file_id] = mf.[file_id]
		ORDER BY avg_io_stall_ms DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>	
	
	<!-- Query 24 -->
	<Query name="IO_Warnings"  level="server">
	<![CDATA[
		CREATE TABLE #IOWarningResults(LogDate datetime, ProcessInfo sysname, LogText nvarchar(1000));

		INSERT INTO #IOWarningResults 
		EXEC xp_readerrorlog 0, 1, N'taking longer than 15 seconds';

		INSERT INTO #IOWarningResults 
		EXEC xp_readerrorlog 1, 1, N'taking longer than 15 seconds';

		INSERT INTO #IOWarningResults 
		EXEC xp_readerrorlog 2, 1, N'taking longer than 15 seconds';

		INSERT INTO #IOWarningResults 
		EXEC xp_readerrorlog 3, 1, N'taking longer than 15 seconds';

		INSERT INTO #IOWarningResults 
		EXEC xp_readerrorlog 4, 1, N'taking longer than 15 seconds';

		SELECT LogDate, ProcessInfo, LogText
		FROM #IOWarningResults
		ORDER BY LogDate DESC;

		DROP TABLE #IOWarningResults;  
	]]>
    </Query>

	<!-- Query 25 -->
	<Query name="DatabaseProperties"  level="server">
	<![CDATA[
		SELECT 
			db.[name] AS [Database Name], 
			db.recovery_model_desc AS [Recovery Model], 
			db.state_desc, 
			db.containment_desc,
			db.log_reuse_wait_desc AS [Log Reuse Wait Description], 
			CONVERT(DECIMAL(18,2), ls.cntr_value/1024.0) AS [Log Size (MB)], 
			CONVERT(DECIMAL(18,2), lu.cntr_value/1024.0) AS [Log Used (MB)],
			CAST(CAST(lu.cntr_value AS FLOAT) / CAST(ls.cntr_value AS FLOAT)AS DECIMAL(18,2)) * 100 AS [Log Used %], 
			db.[compatibility_level] AS [DB Compatibility Level], 
			db.page_verify_option_desc AS [Page Verify Option], db.is_auto_create_stats_on, db.is_auto_update_stats_on,
			db.is_auto_update_stats_async_on, 
			db.is_parameterization_forced, 
			db.snapshot_isolation_state_desc, 
			db.is_read_committed_snapshot_on,
			db.is_auto_close_on, 
			db.is_auto_shrink_on, 
			db.target_recovery_time_in_seconds, 
			db.is_cdc_enabled,
			db.is_published, 
			db.group_database_id, 
			db.replica_id
		FROM sys.databases AS db WITH (NOLOCK)
			INNER JOIN sys.dm_os_performance_counters AS lu WITH (NOLOCK) ON db.name = lu.instance_name
		INNER JOIN sys.dm_os_performance_counters AS ls WITH (NOLOCK) ON db.name = ls.instance_name
		WHERE lu.counter_name LIKE N'Log File(s) Used Size (KB)%' 
			AND ls.counter_name LIKE N'Log File(s) Size (KB)%'
			AND ls.cntr_value > 0 OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 26 -->
	<Query name="MissingIndexes"  level="server">
	<![CDATA[
		SELECT 
			CONVERT(decimal(18,2), user_seeks * avg_total_user_cost * (avg_user_impact * 0.01)) AS [index_advantage], 
			migs.last_user_seek, mid.[statement] AS [Database.Schema.Table],
			mid.equality_columns, 
			mid.inequality_columns, 
			mid.included_columns,
			migs.unique_compiles, 
			migs.user_seeks, 
			migs.avg_total_user_cost, 
			migs.avg_user_impact
		FROM sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
			INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK) ON migs.group_handle = mig.index_group_handle
		INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK) ON mig.index_handle = mid.index_handle
		ORDER BY index_advantage DESC OPTION (RECOMPILE);
	]]>
    </Query>
	
	
	<!-- Query 27 --> <!-- TODO: Convert to db level -->
	<Query name="VLF_Counts"  level="server">
	<![CDATA[
		CREATE TABLE #VLFInfo (RecoveryUnitID int, FileID  int,
							   FileSize bigint, StartOffset bigint,
							   FSeqNo      bigint, [Status]    bigint,
							   Parity      bigint, CreateLSN   numeric(38));
			 
		CREATE TABLE #VLFCountResults(DatabaseName sysname, VLFCount int);
			 
		EXEC sp_MSforeachdb N'Use [?]; 

						INSERT INTO #VLFInfo 
						EXEC sp_executesql N''DBCC LOGINFO([?])''; 
			 
						INSERT INTO #VLFCountResults 
						SELECT DB_NAME(), COUNT(*) 
						FROM #VLFInfo; 

						TRUNCATE TABLE #VLFInfo;'
			 
		SELECT DatabaseName, VLFCount  
		FROM #VLFCountResults
		ORDER BY VLFCount DESC;
			 
		DROP TABLE #VLFInfo;
		DROP TABLE #VLFCountResults;
	]]>
    </Query>	


	<!-- Query 28 --> <!-- TODO: Convert to db level -->
	<Query name="CPU_Usage_By_Database"  level="server">
	<![CDATA[
		WITH DB_CPU_Stats
		AS
		(SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]
		 FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)
		 CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID] 
					  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
					  WHERE attribute = N'dbid') AS pa
		 GROUP BY DatabaseID)
		SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],
			   [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)], 
			   CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent]
		FROM DB_CPU_Stats
		WHERE DatabaseID <> 32767 -- ResourceDB
		ORDER BY [CPU Rank] OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 29 -->
	<Query name="IO_Usage_By_Database"  level="server">
	<![CDATA[
		WITH Aggregate_IO_Statistics
		AS
		(SELECT DB_NAME(database_id) AS [Database Name],
		CAST(SUM(num_of_bytes_read + num_of_bytes_written)/1048576 AS DECIMAL(12, 2)) AS io_in_mb
		FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS [DM_IO_STATS]
		GROUP BY database_id)
		SELECT ROW_NUMBER() OVER(ORDER BY io_in_mb DESC) AS [I/O Rank], [Database Name], io_in_mb AS [Total I/O (MB)],
			   CAST(io_in_mb/ SUM(io_in_mb) OVER() * 100.0 AS DECIMAL(5,2)) AS [I/O Percent]
		FROM Aggregate_IO_Statistics
		ORDER BY [I/O Rank] OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 30 -->
	<Query name="TotalBufferUsageByDatabase"  level="server">
	<![CDATA[
		WITH AggregateBufferPoolUsage
		AS
		(SELECT DB_NAME(database_id) AS [Database Name],
		CAST(COUNT(*) * 8/1024.0 AS DECIMAL (10,2))  AS [CachedSize]
		FROM sys.dm_os_buffer_descriptors WITH (NOLOCK)
		WHERE database_id <> 32767 -- ResourceDB
		GROUP BY DB_NAME(database_id))
		SELECT ROW_NUMBER() OVER(ORDER BY CachedSize DESC) AS [Buffer Pool Rank], [Database Name], CachedSize AS [Cached Size (MB)],
			   CAST(CachedSize / SUM(CachedSize) OVER() * 100.0 AS DECIMAL(5,2)) AS [Buffer Pool Percent]
		FROM AggregateBufferPoolUsage
		ORDER BY [Buffer Pool Rank] OPTION (RECOMPILE);
	]]>
    </Query>
		
	<!-- Query 31  -->
	<Query name="TopWaits"  level="server">
	<![CDATA[
		WITH [Waits] 
		AS (SELECT wait_type, wait_time_ms/ 1000.0 AS [WaitS],
				  (wait_time_ms - signal_wait_time_ms) / 1000.0 AS [ResourceS],
				   signal_wait_time_ms / 1000.0 AS [SignalS],
				   waiting_tasks_count AS [WaitCount],
				   100.0 *  wait_time_ms / SUM (wait_time_ms) OVER() AS [Percentage],
				   ROW_NUMBER() OVER(ORDER BY wait_time_ms DESC) AS [RowNum]
			FROM sys.dm_os_wait_stats WITH (NOLOCK)
			WHERE [wait_type] NOT IN (
				N'BROKER_EVENTHANDLER', N'BROKER_RECEIVE_WAITFOR', N'BROKER_TASK_STOP',
				N'BROKER_TO_FLUSH', N'BROKER_TRANSMITTER', N'CHECKPOINT_QUEUE',
				N'CHKPT', N'CLR_AUTO_EVENT', N'CLR_MANUAL_EVENT', N'CLR_SEMAPHORE',
				N'DBMIRROR_DBM_EVENT', N'DBMIRROR_EVENTS_QUEUE', N'DBMIRROR_WORKER_QUEUE',
				N'DBMIRRORING_CMD', N'DIRTY_PAGE_POLL', N'DISPATCHER_QUEUE_SEMAPHORE',
				N'EXECSYNC', N'FSAGENT', N'FT_IFTS_SCHEDULER_IDLE_WAIT', N'FT_IFTSHC_MUTEX',
				N'HADR_CLUSAPI_CALL', N'HADR_FILESTREAM_IOMGR_IOCOMPLETION', N'HADR_LOGCAPTURE_WAIT', 
				N'HADR_NOTIFICATION_DEQUEUE', N'HADR_TIMER_TASK', N'HADR_WORK_QUEUE',
				N'KSOURCE_WAKEUP', N'LAZYWRITER_SLEEP', N'LOGMGR_QUEUE', N'ONDEMAND_TASK_QUEUE',
				N'PWAIT_ALL_COMPONENTS_INITIALIZED', N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP',
				N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP', N'REQUEST_FOR_DEADLOCK_SEARCH',
				N'RESOURCE_QUEUE', N'SERVER_IDLE_CHECK', N'SLEEP_BPOOL_FLUSH', N'SLEEP_DBSTARTUP',
				N'SLEEP_DCOMSTARTUP', N'SLEEP_MASTERDBREADY', N'SLEEP_MASTERMDREADY',
				N'SLEEP_MASTERUPGRADED', N'SLEEP_MSDBSTARTUP', N'SLEEP_SYSTEMTASK', N'SLEEP_TASK',
				N'SLEEP_TEMPDBSTARTUP', N'SNI_HTTP_ACCEPT', N'SP_SERVER_DIAGNOSTICS_SLEEP',
				N'SQLTRACE_BUFFER_FLUSH', N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', N'SQLTRACE_WAIT_ENTRIES',
				N'WAIT_FOR_RESULTS', N'WAITFOR', N'WAITFOR_TASKSHUTDOWN', N'WAIT_XTP_HOST_WAIT',
				N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG', N'WAIT_XTP_CKPT_CLOSE', N'XE_DISPATCHER_JOIN',
				N'XE_DISPATCHER_WAIT', N'XE_TIMER_EVENT')
			AND waiting_tasks_count > 0)
		SELECT
			MAX (W1.wait_type) AS [WaitType],
			CAST (MAX (W1.WaitS) AS DECIMAL (16,2)) AS [Wait_Sec],
			CAST (MAX (W1.ResourceS) AS DECIMAL (16,2)) AS [Resource_Sec],
			CAST (MAX (W1.SignalS) AS DECIMAL (16,2)) AS [Signal_Sec],
			MAX (W1.WaitCount) AS [Wait Count],
			CAST (MAX (W1.Percentage) AS DECIMAL (5,2)) AS [Wait Percentage],
			CAST ((MAX (W1.WaitS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgWait_Sec],
			CAST ((MAX (W1.ResourceS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgRes_Sec],
			CAST ((MAX (W1.SignalS) / MAX (W1.WaitCount)) AS DECIMAL (16,4)) AS [AvgSig_Sec]
		FROM Waits AS W1
		INNER JOIN Waits AS W2
		ON W2.RowNum <= W1.RowNum
		GROUP BY W1.RowNum
		HAVING SUM (W2.Percentage) - MAX (W1.Percentage) < 99 -- percentage threshold
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 33  -->
	<Query name="AvgTaskCounts"  level="server">
	<![CDATA[
		SELECT 
			AVG(current_tasks_count) AS [Avg Task Count], 
			AVG(work_queue_count) AS [Avg Work Queue Count],
			AVG(runnable_tasks_count) AS [Avg Runnable Task Count],
			AVG(pending_disk_io_count) AS [Avg Pending DiskIO Count]
		FROM sys.dm_os_schedulers WITH (NOLOCK)
		WHERE scheduler_id < 255 OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 35  -->
	<Query name="CpuHistory"  level="server">
	<![CDATA[
		DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK)); 

		SELECT TOP(256) SQLProcessUtilization AS [SQL Server Process CPU Utilization], 
					   SystemIdle AS [System Idle Process], 
					   100 - SystemIdle - SQLProcessUtilization AS [Other Process CPU Utilization], 
					   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event Time] 
		FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id, 
					record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') 
					AS [SystemIdle], 
					record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') 
					AS [SQLProcessUtilization], [timestamp] 
			  FROM (SELECT [timestamp], CONVERT(xml, record) AS [record] 
					FROM sys.dm_os_ring_buffers WITH (NOLOCK)
					WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR' 
					AND record LIKE N'%<SystemHealth>%') AS x) AS y 
		ORDER BY record_id DESC OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 36  -->
	<Query name="TopWorkerTimeQueries"  level="server" textColumns="Query Text,Query Plan">
	<![CDATA[
		SELECT TOP(100) 
			DB_NAME(t.[dbid]) AS [Database Name], 
			qs.total_worker_time AS [Total Worker Time], 
			qs.min_worker_time AS [Min Worker Time],
			qs.total_worker_time/qs.execution_count AS [Avg Worker Time], 
			qs.max_worker_time AS [Max Worker Time], 
			qs.min_elapsed_time AS [Min Elapsed Time], 
			qs.total_elapsed_time/qs.execution_count AS [Avg Elapsed Time], 
			qs.max_elapsed_time AS [Max Elapsed Time],
			qs.min_logical_reads AS [Min Logical Reads],
			qs.total_logical_reads/qs.execution_count AS [Avg Logical Reads],
			qs.max_logical_reads AS [Max Logical Reads], 
			qs.execution_count AS [Execution Count], 
			qs.creation_time AS [Creation Time],
			t.[text] AS [Query Text], 
			qp.query_plan AS [Query Plan] -- uncomment out these columns if not copying results to Excel
		FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)
		CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t 
		CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp 
		ORDER BY qs.total_worker_time DESC OPTION (RECOMPILE);
	]]>
    </Query>
	


	<!-- Query 37  -->
	<Query name="PageLifeExpectancy"  level="server">
	<![CDATA[
		SELECT 
			@@SERVERNAME AS [ServerName], 
			[object_name], 
			instance_name, 
			cntr_value AS [PageLifeExpectancy]
		FROM 
			sys.dm_os_performance_counters WITH (NOLOCK)
		WHERE [object_name] LIKE N'%Buffer Node%' -- Handles named instances
		AND counter_name = N'Page life expectancy' 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 39  -->
	<Query name="MemoryClerkUsage"  level="server">
	<![CDATA[
		SELECT TOP(100) 
			mc.[type] AS [Memory Clerk Type], 
			CAST((SUM(mc.pages_kb)/1024.0) AS DECIMAL (15,2)) AS [Memory Usage (MB)] 
		FROM 
			sys.dm_os_memory_clerks AS mc WITH (NOLOCK)
		GROUP BY mc.[type]  
		ORDER BY SUM(mc.pages_kb) DESC 
		OPTION (RECOMPILE)
	]]>
    </Query>
	
	<!-- Query 40  -->
	<Query name="AdHocQueries"  level="server" textColumns="QueryText">
	<![CDATA[
		SELECT TOP(50) 
			[text] AS [QueryText], 
			cp.cacheobjtype, 
			cp.objtype, 
			cp.size_in_bytes/1024 AS [Plan Size in KB]
		FROM 
			sys.dm_exec_cached_plans AS cp WITH (NOLOCK)
			CROSS APPLY sys.dm_exec_sql_text(plan_handle) 
		WHERE 
			cp.cacheobjtype = N'Compiled Plan' AND cp.objtype IN (N'Adhoc', N'Prepared')  AND cp.usecounts = 1
		ORDER BY 
			cp.size_in_bytes DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- Query 41  -->
	<Query name="TopLogicalReadsQueries"  level="server" textColumns="QueryText,QueryPlan">
	<![CDATA[
		SELECT TOP(50) 
			DB_NAME(t.[dbid]) AS [Database Name], 
			qs.total_logical_reads AS [Total Logical Reads],
			qs.min_logical_reads AS [Min Logical Reads],
			qs.total_logical_reads/qs.execution_count AS [Avg Logical Reads],
			qs.max_logical_reads AS [Max Logical Reads],   
			qs.min_worker_time AS [Min Worker Time],
			qs.total_worker_time/qs.execution_count AS [Avg Worker Time], 
			qs.max_worker_time AS [Max Worker Time], 
			qs.min_elapsed_time AS [Min Elapsed Time], 
			qs.total_elapsed_time/qs.execution_count AS [Avg Elapsed Time], 
			qs.max_elapsed_time AS [Max Elapsed Time],
			qs.execution_count AS [Execution Count], 
			qs.creation_time AS [Creation Time],
			t.[text] AS [QueryText], 
			qp.query_plan AS [QueryPlan]
		FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)
		CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t 
		CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp 
		ORDER BY qs.total_logical_reads DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>
	
	<!-- DB Level Queries -->
	
	
	<!-- Query 42 -->
	<Query name="FileSizeAndSpace"  level="db">
	<![CDATA[
		SELECT 
			f.name AS [File Name], 
			f.physical_name AS [Physical Name], 
			CAST((f.size/128.0) AS DECIMAL(15,2)) AS [Total Size in MB],
			CAST(f.size/128.0 - CAST(FILEPROPERTY(f.name, 'SpaceUsed') AS int)/128.0 AS DECIMAL(15,2)) 	AS [Available Space In MB], 
			[file_id], 
			fg.name AS [Filegroup Name],
			f.is_percent_growth, 
			f.growth
		FROM sys.database_files AS f WITH (NOLOCK) 
		LEFT OUTER JOIN sys.data_spaces AS fg WITH (NOLOCK) 
		ON f.data_space_id = fg.data_space_id OPTION (RECOMPILE);
	]]>
    </Query>

	
	<!-- Query  43 -->
	<Query name="IOStatsByFile" level="db">
	<![CDATA[
		SELECT 
			DB_NAME(DB_ID()) AS [Database Name], 
			df.name AS [Logical Name], 
			vfs.[file_id], 
			df.type_desc,
			df.physical_name AS [Physical Name], 
			CAST(vfs.size_on_disk_bytes/1048576.0 AS DECIMAL(10, 2)) AS [Size on Disk (MB)],
			vfs.num_of_reads, 
			vfs.num_of_writes, 
			vfs.io_stall_read_ms, 
			vfs.io_stall_write_ms,
			CAST(100. * vfs.io_stall_read_ms/(vfs.io_stall_read_ms + vfs.io_stall_write_ms) AS DECIMAL(10,1)) AS [IO Stall Reads Pct],
			CAST(100. * vfs.io_stall_write_ms/(vfs.io_stall_write_ms + vfs.io_stall_read_ms) AS DECIMAL(10,1)) AS [IO Stall Writes Pct],
			(vfs.num_of_reads + vfs.num_of_writes) AS [Writes + Reads], 
			CAST(vfs.num_of_bytes_read/1048576.0 AS DECIMAL(10, 2)) AS [MB Read], 
			CAST(vfs.num_of_bytes_written/1048576.0 AS DECIMAL(10, 2)) AS [MB Written],
			CAST(100. * vfs.num_of_reads/(vfs.num_of_reads + vfs.num_of_writes) AS DECIMAL(10,1)) AS [# Reads Pct],
			CAST(100. * vfs.num_of_writes/(vfs.num_of_reads + vfs.num_of_writes) AS DECIMAL(10,1)) AS [# Write Pct],
			CAST(100. * vfs.num_of_bytes_read/(vfs.num_of_bytes_read + vfs.num_of_bytes_written) AS DECIMAL(10,1)) AS [Read Bytes Pct],
			CAST(100. * vfs.num_of_bytes_written/(vfs.num_of_bytes_read + vfs.num_of_bytes_written) AS DECIMAL(10,1)) AS [Written Bytes Pct]
		FROM 
			sys.dm_io_virtual_file_stats(DB_ID(), NULL) AS vfs
			INNER JOIN sys.database_files AS df WITH (NOLOCK) ON vfs.[file_id]= df.[file_id] 
		OPTION (RECOMPILE);	
	]]>
    </Query>
	
	<!-- Query 44 -->  
	<Query name="QueryExecutionCounts" level="db" textColumns="QueryText,QueryPlan">
	<![CDATA[
			SELECT TOP(50) 
				qs.execution_count AS [Execution Count],
				qs.total_logical_reads AS [Total Logical Reads],
				qs.total_logical_reads/qs.execution_count AS [Avg Logical Reads],
				qs.total_worker_time AS [Total Worker Time],
				qs.total_worker_time/qs.execution_count AS [Avg Worker Time], 
				qs.total_elapsed_time AS [Total Elapsed Time],
				qs.total_elapsed_time/qs.execution_count AS [Avg Elapsed Time], 
				qs.creation_time AS [Creation Time],
				t.[text] AS QueryText, 
				qp.query_plan AS QueryPlan
		FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)
		CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t 
		CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp 
		WHERE t.dbid = DB_ID()
		ORDER BY qs.execution_count DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 45 -->
	<Query name="SP_ExecutionCounts" level="db">
	<![CDATA[
		SELECT TOP(100) 
			p.name AS [SP Name], 
			qs.execution_count,
			ISNULL(qs.execution_count/DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute],
			qs.total_worker_time/qs.execution_count AS [AvgWorkerTime], 
			qs.total_worker_time AS [TotalWorkerTime],  
			qs.total_elapsed_time, 
			qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time],
			qs.cached_time
		FROM sys.procedures AS p WITH (NOLOCK)
		INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)
		ON p.[object_id] = qs.[object_id]
		WHERE qs.database_id = DB_ID()
		ORDER BY qs.execution_count DESC OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 46 -->
	<Query name="SP_Avg_Elapsed_Time" level="db">
	<![CDATA[
		SELECT TOP(25) 
			p.name AS [SP Name], 
			qs.min_elapsed_time, 
			qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time], 
			qs.max_elapsed_time, 
			qs.last_elapsed_time, 
			qs.total_elapsed_time, 
			qs.execution_count, 
			ISNULL(qs.execution_count/DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute], 
			qs.total_worker_time/qs.execution_count AS [AvgWorkerTime], 
			qs.total_worker_time AS [TotalWorkerTime],
			qs.cached_time
		FROM sys.procedures AS p WITH (NOLOCK)
		INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)
		ON p.[object_id] = qs.[object_id]
		WHERE qs.database_id = DB_ID()
		ORDER BY avg_elapsed_time DESC 
		OPTION (RECOMPILE);	
	]]>
    </Query>

	<!-- Query 47  -->
	<Query name="SP_WorkerTime" level="db">
	<![CDATA[
		SELECT TOP(25) 
			p.name AS [SP Name], 
			qs.total_worker_time AS [TotalWorkerTime], 
			qs.total_worker_time/qs.execution_count AS [AvgWorkerTime], 
			qs.execution_count, 
			ISNULL(qs.execution_count/DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute],
			qs.total_elapsed_time, 
			qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time], 
			qs.cached_time
		FROM sys.procedures AS p WITH (NOLOCK)
		INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)
		ON p.[object_id] = qs.[object_id]
		WHERE qs.database_id = DB_ID()
		ORDER 
			BY qs.total_worker_time DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 48 -->
	<Query name="SP_Logical_Reads" level="db">
	<![CDATA[
		SELECT TOP(25) 
			p.name AS [SP Name],
			qs.total_logical_reads AS [TotalLogicalReads], 
			qs.total_logical_reads/qs.execution_count AS [AvgLogicalReads],
			qs.execution_count, 
			ISNULL(qs.execution_count/DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute], 
			qs.total_elapsed_time, 
			qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time], 
			qs.cached_time
		FROM sys.procedures AS p WITH (NOLOCK)
		INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)
		ON p.[object_id] = qs.[object_id]
		WHERE qs.database_id = DB_ID()
		ORDER BY qs.total_logical_reads DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 49 -->
	<Query name="SP_Physical_Reads" level="db">
	<![CDATA[
		SELECT TOP(25) 
			p.name AS [SP Name],
			qs.total_physical_reads AS [TotalPhysicalReads], 
			qs.total_physical_reads/qs.execution_count AS [AvgPhysicalReads], 
			qs.execution_count, 
			qs.total_logical_reads,
			qs.total_elapsed_time, 
			qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time], 
			qs.cached_time 
		FROM sys.procedures AS p WITH (NOLOCK)
		INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)
		ON p.[object_id] = qs.[object_id]
		WHERE qs.database_id = DB_ID()
		AND qs.total_physical_reads > 0
		ORDER BY 
			qs.total_physical_reads DESC,
			qs.total_logical_reads DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query  50 -->
	<Query name="SP_Logical_Writes" level="db">
	<![CDATA[
		SELECT TOP(25) 
			p.name AS [SP Name], 
			qs.total_logical_writes AS [TotalLogicalWrites], 
			qs.total_logical_writes/qs.execution_count AS [AvgLogicalWrites], 
			qs.execution_count,
			ISNULL(qs.execution_count/DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute],
			qs.total_elapsed_time, 
			qs.total_elapsed_time/qs.execution_count AS [avg_elapsed_time], 
			qs.cached_time
		FROM 
			sys.procedures AS p WITH (NOLOCK)
			INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK) ON p.[object_id] = qs.[object_id]
		WHERE 
			qs.database_id = DB_ID()
			AND qs.total_logical_writes > 0
		ORDER BY 
			qs.total_logical_writes DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query  51 -->
	<Query name="Top_IO_Statements" level="db">
	<![CDATA[
		SELECT TOP(50) 
			OBJECT_NAME(qt.objectid, dbid) AS [SP Name],
			(qs.total_logical_reads + qs.total_logical_writes) /qs.execution_count AS [Avg IO], 
			qs.execution_count AS [Execution Count],
			SUBSTRING(qt.[text],qs.statement_start_offset/2, 
			(CASE 
				WHEN qs.statement_end_offset = -1 
			 THEN LEN(CONVERT(nvarchar(max), qt.[text])) * 2 
				ELSE qs.statement_end_offset 
			 END - qs.statement_start_offset)/2) AS [Query Text]	
		FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)
		CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS qt
		WHERE qt.[dbid] = DB_ID()
		ORDER BY [Avg IO] DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query  52 -->
	<Query name="Bad_NC_Indexes" level="db">
	<![CDATA[
		SELECT 
			OBJECT_NAME(s.[object_id]) AS [Table Name], 
			i.name AS [Index Name], 
			i.index_id, 
			i.is_disabled, 
			i.is_hypothetical,
			i.has_filter, 
			i.fill_factor,
			user_updates AS [Total Writes], 
			user_seeks + user_scans + user_lookups AS [Total Reads],
			user_updates - (user_seeks + user_scans + user_lookups) AS [Difference]
		FROM 
			sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
			INNER JOIN sys.indexes AS i WITH (NOLOCK) ON s.[object_id] = i.[object_id]
				AND i.index_id = s.index_id
		WHERE 
			OBJECTPROPERTY(s.[object_id],'IsUserTable') = 1
			AND s.database_id = DB_ID()
			AND user_updates > (user_seeks + user_scans + user_lookups)
			AND i.index_id > 1
		ORDER BY 
			[Difference] DESC, 
			[Total Writes] DESC, 
			[Total Reads] ASC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 53 -->
 	<Query name="Missing_Indexes" level="db">
	<![CDATA[
		SELECT DISTINCT 
			CONVERT(decimal(18,2), user_seeks * avg_total_user_cost * (avg_user_impact * 0.01)) AS [index_advantage],
			migs.last_user_seek, 
			mid.[statement] AS [Database.Schema.Table],
			mid.equality_columns, 
			mid.inequality_columns, 
			mid.included_columns,
			migs.unique_compiles, 
			migs.user_seeks, 
			migs.avg_total_user_cost, 
			migs.avg_user_impact,
			OBJECT_NAME(mid.[object_id]) AS [Table Name], 
			p.rows AS [Table Rows]
		FROM 
			sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
			INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK)
				ON migs.group_handle = mig.index_group_handle
			INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK)
			ON mig.index_handle = mid.index_handle
			INNER JOIN sys.partitions AS p WITH (NOLOCK)
			ON p.[object_id] = mid.[object_id]
		WHERE 
			mid.database_id = DB_ID() 
		ORDER BY 
			index_advantage DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 54 -->
	<Query name="Missing_Index_Warnings" level="db">
	<![CDATA[
		SELECT TOP(25) 
			OBJECT_NAME(objectid) AS [ObjectName], 
            query_plan, 
			cp.objtype, 
			cp.usecounts, 
			cp.size_in_bytes
		FROM 
			sys.dm_exec_cached_plans AS cp WITH (NOLOCK)
		CROSS APPLY sys.dm_exec_query_plan(cp.plan_handle) AS qp
		WHERE CAST(query_plan AS NVARCHAR(MAX)) LIKE N'%MissingIndex%' AND dbid = DB_ID()
		ORDER BY cp.usecounts DESC OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 55 -->
	<Query name="Buffer_Usage" level="db">
	<![CDATA[
		SELECT 
			OBJECT_NAME(p.[object_id]) AS [Object Name], 
			p.index_id, 
			CAST(COUNT(*)/128.0 AS DECIMAL(10, 2)) AS [Buffer size(MB)],  
			COUNT(*) AS [BufferCount], 
			p.Rows AS [Row Count],
			p.data_compression_desc AS [Compression Type]
		FROM 
			sys.allocation_units AS a WITH (NOLOCK)
			INNER JOIN sys.dm_os_buffer_descriptors AS b WITH (NOLOCK)
			ON a.allocation_unit_id = b.allocation_unit_id
			INNER JOIN sys.partitions AS p WITH (NOLOCK)
			ON a.container_id = p.hobt_id
		WHERE 
			b.database_id = CONVERT(int,DB_ID())
			AND p.[object_id] > 100
		GROUP BY 
			p.[object_id], 
			p.index_id, 
			p.data_compression_desc, 
			p.[Rows]
		ORDER BY 
			[BufferCount] DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 56 -->
	<Query name="Table_Sizes" level="db">
	<!-- TODO Add actual size of table --> 
	<![CDATA[
		SELECT 
			OBJECT_NAME(object_id) AS [ObjectName], 
			SUM(Rows) AS [RowCount], 
			data_compression_desc AS [CompressionType]
		FROM 
			sys.partitions WITH (NOLOCK)
		WHERE index_id < 2 --ignore the partitions from the non-clustered index if any
			AND OBJECT_NAME(object_id) NOT LIKE N'sys%'
			AND OBJECT_NAME(object_id) NOT LIKE N'queue_%' 
			AND OBJECT_NAME(object_id) NOT LIKE N'filestream_tombstone%' 
			AND OBJECT_NAME(object_id) NOT LIKE N'fulltext%'
			AND OBJECT_NAME(object_id) NOT LIKE N'ifts_comp_fragment%'
			AND OBJECT_NAME(object_id) NOT LIKE N'filetable_updates%'
			AND OBJECT_NAME(object_id) NOT LIKE N'xml_index_nodes%'
		GROUP BY 
			object_id, 
			data_compression_desc
		ORDER BY 
			SUM(Rows) DESC 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 57  -->
	<Query name="Table_Properties" level="db">
	<![CDATA[
		SELECT 
			OBJECT_NAME(t.[object_id]) AS [ObjectName], 
			p.[rows] AS [Table Rows], 
			p.index_id, 
			p.data_compression_desc AS [Index Data Compression],
			t.create_date, 
			t.lock_on_bulk_load, 
			t.is_replicated, 
			t.has_replication_filter, 
			t.is_tracked_by_cdc, 
			t.lock_escalation_desc, 
			t.is_filetable
		FROM 
			sys.tables AS t WITH (NOLOCK)
			INNER JOIN sys.partitions AS p WITH (NOLOCK) ON t.[object_id] = p.[object_id]
		WHERE 
			OBJECT_NAME(t.[object_id]) NOT LIKE N'sys%'
		ORDER BY 
			OBJECT_NAME(t.[object_id]), 
			p.index_id 
		OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 58 -->
	<Query name="Statistics_Update" level="db">
	<![CDATA[
	SELECT SCHEMA_NAME(o.Schema_ID) + N'.' + o.NAME AS [Object Name], o.type_desc AS [Object Type],
      i.name AS [Index Name], STATS_DATE(i.[object_id], i.index_id) AS [Statistics Date], 
      s.auto_created, s.no_recompute, s.user_created, s.is_temporary,
	  st.row_count, st.used_page_count
FROM sys.objects AS o WITH (NOLOCK)
INNER JOIN sys.indexes AS i WITH (NOLOCK)
ON o.[object_id] = i.[object_id]
INNER JOIN sys.stats AS s WITH (NOLOCK)
ON i.[object_id] = s.[object_id] 
AND i.index_id = s.stats_id
INNER JOIN sys.dm_db_partition_stats AS st WITH (NOLOCK)
ON o.[object_id] = st.[object_id]
AND i.[index_id] = st.[index_id]
WHERE o.[type] IN ('U', 'V')
AND st.row_count > 0
ORDER BY STATS_DATE(i.[object_id], i.index_id) DESC OPTION (RECOMPILE);  
	]]>
    </Query>

	<!-- Query 59 -->
	<Query name="Volatile Indexes" level="db">
	<![CDATA[
	SELECT o.name AS [Object Name], o.[object_id], o.type_desc, s.name AS [Statistics Name], 
       s.stats_id, s.no_recompute, s.auto_created, 
	   sp.modification_counter, sp.rows, sp.rows_sampled, sp.last_updated
FROM sys.objects AS o WITH (NOLOCK)
INNER JOIN sys.stats AS s WITH (NOLOCK)
ON s.object_id = o.object_id
CROSS APPLY sys.dm_db_stats_properties(s.object_id, s.stats_id) AS sp
WHERE o.type_desc NOT IN (N'SYSTEM_TABLE', N'INTERNAL_TABLE')
AND sp.modification_counter > 0
ORDER BY sp.modification_counter DESC, o.name OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 60 -->
	<Query name="Index Fragmentation" level="db">
	<![CDATA[
	SELECT DB_NAME(ps.database_id) AS [Database Name], OBJECT_NAME(ps.OBJECT_ID) AS [Object Name], 
i.name AS [Index Name], ps.index_id, ps.index_type_desc, ps.avg_fragmentation_in_percent, 
ps.fragment_count, ps.page_count, i.fill_factor, i.has_filter, i.filter_definition
FROM sys.dm_db_index_physical_stats(DB_ID(),NULL, NULL, NULL , N'LIMITED') AS ps
INNER JOIN sys.indexes AS i WITH (NOLOCK)
ON ps.[object_id] = i.[object_id] 
AND ps.index_id = i.index_id
WHERE ps.database_id = DB_ID()
AND ps.page_count > 2500
ORDER BY ps.avg_fragmentation_in_percent DESC OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 61 -->
	<Query name="Overall Index Usage - Reads" level="db">
	<![CDATA[
	SELECT OBJECT_NAME(i.[object_id]) AS [ObjectName], i.name AS [IndexName], i.index_id, 
       s.user_seeks, s.user_scans, s.user_lookups,
	   s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads], 
	   s.user_updates AS [Writes],  
	   i.type_desc AS [Index Type], i.fill_factor AS [Fill Factor], i.has_filter, i.filter_definition, 
	   s.last_user_scan, s.last_user_lookup, s.last_user_seek
FROM sys.indexes AS i WITH (NOLOCK)
LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
ON i.[object_id] = s.[object_id]
AND i.index_id = s.index_id
AND s.database_id = DB_ID()
WHERE OBJECTPROPERTY(i.[object_id],'IsUserTable') = 1
ORDER BY s.user_seeks + s.user_scans + s.user_lookups DESC OPTION (RECOMPILE); -- Order by reads
	]]>
    </Query>

	<!-- Query 62 -->
	<Query name="Overall Index Usage - Writes" level="db">
	<![CDATA[
	SELECT OBJECT_NAME(i.[object_id]) AS [ObjectName], i.name AS [IndexName], i.index_id,
	   s.user_updates AS [Writes], s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads], 
	   i.type_desc AS [Index Type], i.fill_factor AS [Fill Factor], i.has_filter, i.filter_definition,
	   s.last_system_update, s.last_user_update
FROM sys.indexes AS i WITH (NOLOCK)
LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
ON i.[object_id] = s.[object_id]
AND i.index_id = s.index_id
AND s.database_id = DB_ID()
WHERE OBJECTPROPERTY(i.[object_id],'IsUserTable') = 1
ORDER BY s.user_updates DESC OPTION (RECOMPILE);						 -- Order by writes
	]]>
    </Query>

	<!-- Query 63 -->
	<Query name="Lock_Waits" level="db">
	<![CDATA[
	SELECT o.name AS [table_name], i.name AS [index_name], ios.index_id, ios.partition_number,
		SUM(ios.row_lock_wait_count) AS [total_row_lock_waits], 
		SUM(ios.row_lock_wait_in_ms) AS [total_row_lock_wait_in_ms],
		SUM(ios.page_lock_wait_count) AS [total_page_lock_waits],
		SUM(ios.page_lock_wait_in_ms) AS [total_page_lock_wait_in_ms],
		SUM(ios.page_lock_wait_in_ms)+ SUM(row_lock_wait_in_ms) AS [total_lock_wait_in_ms]
FROM sys.dm_db_index_operational_stats(DB_ID(), NULL, NULL, NULL) AS ios
INNER JOIN sys.objects AS o WITH (NOLOCK)
ON ios.[object_id] = o.[object_id]
INNER JOIN sys.indexes AS i WITH (NOLOCK)
ON ios.[object_id] = i.[object_id] 
AND ios.index_id = i.index_id
WHERE o.[object_id] > 100
GROUP BY o.name, i.name, ios.index_id, ios.partition_number
HAVING SUM(ios.page_lock_wait_in_ms)+ SUM(row_lock_wait_in_ms) > 0
ORDER BY total_lock_wait_in_ms DESC OPTION (RECOMPILE);
	]]>
    </Query>

	<!-- Query 64 -->
	<Query name="Recent Full Backups" level="db">
	<![CDATA[
	SELECT TOP (30) bs.machine_name, bs.server_name, bs.database_name AS [Database Name], bs.recovery_model,
CONVERT (BIGINT, bs.backup_size / 1048576 ) AS [Uncompressed Backup Size (MB)],
CONVERT (BIGINT, bs.compressed_backup_size / 1048576 ) AS [Compressed Backup Size (MB)],
CONVERT (NUMERIC (20,2), (CONVERT (FLOAT, bs.backup_size) /
CONVERT (FLOAT, bs.compressed_backup_size))) AS [Compression Ratio], bs.has_backup_checksums, bs.is_copy_only,
DATEDIFF (SECOND, bs.backup_start_date, bs.backup_finish_date) AS [Backup Elapsed Time (sec)],
bs.backup_finish_date AS [Backup Finish Date]
FROM msdb.dbo.backupset AS bs WITH (NOLOCK)
WHERE bs.database_name = DB_NAME(DB_ID())
AND bs.[type] = 'D' -- Change to L if you want Log backups
ORDER BY bs.backup_finish_date DESC OPTION (RECOMPILE);
	]]>
    </Query>

</Queries>